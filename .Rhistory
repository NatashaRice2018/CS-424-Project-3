shiny::runApp('cs 424/evlWeatherForR')
install.packages("box")
install.packages("date")
shiny::runApp('cs 424/evlWeatherForR')
dir()
getwd()
setwd(CS_424)
setwd(CS424)
setwd(CSb424)
setwd(CS 424)
setwd("CS 424"")
df
quit
plot(cars)
install.packages("tidyverse")
library(tidyverse)
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
library(tidyverse)
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color  = class))
ggplot(data = mpg) +
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, rows = 7)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 7)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(mpg, aes(displ, cty)) + facet_wrap(~ cyl, labeller = new_names)
ggplot(mpg, aes(displ, cty)) + facet_wrap(~ cyl, ~)
ggplot(mpg, aes(displ, cty)) + facet_wrap(~ cyl)
ggplot(mpg, aes(displ, cty)) + facet_wrap(~ cyl, labeller = new_names)
new_names <- as_labeller(c(`4` = "name0", `5` = "other_name", `6` = "name1", `8` = "name2"))
ggplot(mpg, aes(displ, cty)) + facet_wrap(~ cyl, labeller = new_names)
shiny::runApp('cs 424/CS-424---Project-2')
runApp('cs 424/CS-424---Project-2')
View(data2)
View(data2)
rm(ggolot2)
install.packages("ggplot2")
install.packages(sp)
install.packages("sp")
shiny::runApp('cs 424/CS-424---Project-2')
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(dplyr)
#Libaries needed to read in data faster.
library(data.table)
library(fasttime)
library(ggridges)
install.packages("shineydashboard")
runApp('cs 424/CS-424---Project-2')
shiny::runApp('cs 424/CS-424---Project-2')
shiny::runApp('cs 424/CS-424---Project-2')
shiny::runApp('cs 424/CS-424---Project-2')
shiny::runApp('cs 424/CS-424---Project-2')
runApp('cs 424/CS-424---Project-2')
runApp('cs 424/CS-424---Project-2')
runApp('cs 424/CS-424---Project-2')
shiny::runApp('cs 424/CS-424---Project-2')
runApp('cs 424/CS-424---Project-2')
runApp('cs 424/CS-424---Project-2')
runApp('cs 424/CS-424---Project-2')
runApp('cs 424/CS-424---Project-2')
runApp('cs 424/CS-424---Project-2')
shiny::runApp('cs 424/CS-424-Project-3')
runApp('cs 424/CS-424-Project-3')
runApp('cs 424/CS-424-Project-3')
runApp('cs 424/CS-424-Project-3')
runApp('cs 424/CS-424-Project-3')
runApp('cs 424/CS-424-Project-3')
month_abb
month_abb
require(datasets)
"read in the data"
allData<- read.table(file = "1950-2016_all_tornadoes.csv", header = TRUE,sep = ',')
"Convert data to date-time format"
allData$date_time <- as.POSIXct(paste(allData$date, allData$time), format = "%Y-%m-%d %H:%M:%S" )
"get some other string info for data"
allData$day_string <- weekdays(allData$date_time)
allData$hour <-lubridate::hour(allData$date_time)
allData$month_abb <- month.abb[allData$mo]
allData$month_abb <- factor(allData$month_abb, levels = month.abb)
allData$date <- date(allData$date_time)
"allData$time_12hr <- format(strptime(allData$time, format='%H:%M:%S'), '%I:%M:%S %p')
allData$time_24hr <- allData$time"
"Want to factor magnitude so we get null values if applicapable"
allData$mag <- factor(allData$mag, levels = c(-9, 0, 1, 2, 3, 4, 5))
"!!!!!If any other vairables are needed for the structure add the lines here and create a new version of the .rds file!!!!!"
"create the rdata file"
saveRDS(allData, file = "tornadoes.rds")
"read in data with the below call"
my_data <- readRDS("tornadoes.rds")
"how to sort by time!"
"allData[ order(allData$time , decreasing = FALSE ),]"
"allData <- allData[order(as_datetime(allData$time_12hr, format=%I:%M:%S %p)),]"
"Convert from 24 hr to military"
"format(strptime(allData$time, format='%H:%M:%S'), '%I:%M:%S %p')"
runApp('cs 424/CS-424-Project-3')
require(datasets)
"read in the data"
allData<- read.table(file = "1950-2016_all_tornadoes.csv", header = TRUE,sep = ',')
"Convert data to date-time format"
allData$date_time <- as.POSIXct(paste(allData$date, allData$time), format = "%Y-%m-%d %H:%M:%S" )
"get some other string info for data"
allData$day_string <- weekdays(allData$date_time)
allData$hour <-lubridate::hour(allData$date_time)
allData$month_abb <- month.abb[allData$mo]
allData$month_abb <- factor(allData$month_abb, levels = month.abb)
allData$date <- date(allData$date_time)
"allData$time_12hr <- format(strptime(allData$time, format='%H:%M:%S'), '%I:%M:%S %p')
allData$time_24hr <- allData$time"
"Want to factor magnitude so we get null values if applicapable"
allData$mag <- factor(allData$mag, levels = c(-9, 0, 1, 2, 3, 4, 5))
"!!!!!If any other vairables are needed for the structure add the lines here and create a new version of the .rds file!!!!!"
"create the rdata file"
saveRDS(allData, file = "tornadoes.rds")
"read in data with the below call"
my_data <- readRDS("tornadoes.rds")
"how to sort by time!"
"allData[ order(allData$time , decreasing = FALSE ),]"
"allData <- allData[order(as_datetime(allData$time_12hr, format=%I:%M:%S %p)),]"
"Convert from 24 hr to military"
"format(strptime(allData$time, format='%H:%M:%S'), '%I:%M:%S %p')"
setwd("~/cs 424/CS-424-Project-3")
require(datasets)
"read in the data"
allData<- read.table(file = "1950-2016_all_tornadoes.csv", header = TRUE,sep = ',')
"Convert data to date-time format"
allData$date_time <- as.POSIXct(paste(allData$date, allData$time), format = "%Y-%m-%d %H:%M:%S" )
"get some other string info for data"
allData$day_string <- weekdays(allData$date_time)
allData$hour <-lubridate::hour(allData$date_time)
allData$month_abb <- month.abb[allData$mo]
allData$month_abb <- factor(allData$month_abb, levels = month.abb)
allData$date <- date(allData$date_time)
"allData$time_12hr <- format(strptime(allData$time, format='%H:%M:%S'), '%I:%M:%S %p')
allData$time_24hr <- allData$time"
"Want to factor magnitude so we get null values if applicapable"
allData$mag <- factor(allData$mag, levels = c(-9, 0, 1, 2, 3, 4, 5))
"!!!!!If any other vairables are needed for the structure add the lines here and create a new version of the .rds file!!!!!"
"create the rdata file"
saveRDS(allData, file = "tornadoes.rds")
"read in data with the below call"
my_data <- readRDS("tornadoes.rds")
"how to sort by time!"
"allData[ order(allData$time , decreasing = FALSE ),]"
"allData <- allData[order(as_datetime(allData$time_12hr, format=%I:%M:%S %p)),]"
"Convert from 24 hr to military"
"format(strptime(allData$time, format='%H:%M:%S'), '%I:%M:%S %p')"
runApp()
n_inj_month <- aggregate(inj ~ month_abb, data = allData, sum)
n_fat_month <- aggregate(fat ~ month_abb, data = allData, sum)
n_loss_month <- aggregate(loss ~ month_abb, data = allData, sum)
inj_fat_loss_month <- merge(n_inj_month,n_fat_month)
inj_fat_loss_month <- merge(inj_fat_loss_month,n_loss_month)
inj_fat_loss_month <- as.data.frame(inj_fat_loss_month)
View(inj_fat_loss_month)
runApp()
runApp()
n_inj_hour <- aggregate(inj ~ hour, data = allData, sum)
n_fat_hour <- aggregate(fat ~ hour, data = allData, sum)
n_loss_hour <- aggregate(loss ~ hour, data = allData, sum)
inj_fat_loss_hour <- merge(n_inj_hour,n_fat_hour)
inj_fat_loss_hour <- merge(inj_fat_loss_hour,n_loss_hour)
n_inj_hour <- aggregate(inj ~ hour, data = allData, sum)
n_fat_hour <- aggregate(fat ~ hour, data = allData, sum)
n_loss_hour <- aggregate(loss ~ hour, data = allData, sum)
inj_fat_loss_hour <- merge(n_inj_hour,n_fat_hour)
inj_fat_loss_hour <- merge(inj_fat_loss_hour,n_loss_hour)
inj_fat_loss_hour$hour<-switch_hour(inj_fat_loss_hour$hour)
#set a factor for time baised on what clock we are in
inj_fat_loss_hour$hour <- set_time_factor(inj_fat_loss_hour$hour)
runApp()
